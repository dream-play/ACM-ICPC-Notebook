// ax + by = c, a & b are known ints, x & y are unknown ints
// solution exists iff gcd(a, b) = c, so A = a / g, B = b / g
// AX + BY = 1, X and Y found using euclid ex gcd
// (X * g, Y * g) solution to ax + by = g  
// a = b = 0, is trivial, should  be handled separately

bool find_any_solution (int a, int b, int c, int & x0, int & y0, int & g) {
	g = exgcd (abs(a), abs(b), x0, y0);
	if (c % g != 0)
		return false;
	x0 *= c / g;
	y0 *= c / g;
	if (a < 0)   x0 *= -1;
	if (b < 0)   y0 *= -1;
	return true;
}
// conditions on x and y.
// generating all solutions, if one (x0, y0) is found
// x = x0 + k * (b/g)
// y = y0 - k * (a/g), k is integer, (x, y) is valid solution to ax + by = c

// number of solutions / all solutions in x range [minx, maxx] and y range [miny, maxy]
void shift_solution (int & x, int & y, int a, int b, int cnt) {
	x += cnt * b;
	y -= cnt * a;
} 
// returns number of solutions
int find_all_solutions (int a, int b, int c, int minx, int maxx, int miny, int maxy) {
	int x, y, g;
	if (! find_any_solution (a, b, c, x, y, g))
		return 0;
	a /= g;  b /= g;
 
	int sign_a = a>0 ? +1 : -1;
	int sign_b = b>0 ? +1 : -1;
 
	shift_solution (x, y, a, b, (minx - x) / b);
	if (x < minx)
		shift_solution (x, y, a, b, sign_b);
	if (x > maxx)
		return 0;
	int lx1 = x;
 
	shift_solution (x, y, a, b, (maxx - x) / b);
	if (x > maxx)
		shift_solution (x, y, a, b, -sign_b);
	int rx1 = x;
 
	shift_solution (x, y, a, b, - (miny - y) / a);
	if (y < miny)
		shift_solution (x, y, a, b, -sign_a);
	if (y > maxy)
		return 0;
	int lx2 = x;
 
	shift_solution (x, y, a, b, - (maxy - y) / a);
	if (y > maxy)
		shift_solution (x, y, a, b, sign_a);
	int rx2 = x;
 
	if (lx2 > rx2)
		swap (lx2, rx2);
	int lx = max (lx1, lx2);
	int rx = min (rx1, rx2);
 
	return (rx - lx) / abs(b) + 1;
}
// to generate all sol,[lx, rx], keep adding b to lx till rx is reached
// corresponding y obtained directly using ax + by = c
// note b is divided by g inside code, this new b should be added to lx

// Finding solutions in a predetermined interval with the smallest sum of x + y
// under no restrictions on x, y smallest sum is mostly minus infinity
// summing above given 2 equations
// x + y = (x0 + y0) + k * (b - a) / g
// if a > b, largest k => smallest sum
// if a < b, smallest k => smallest sum
// if a = b, no change in x + y possible

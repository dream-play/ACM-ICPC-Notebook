//MkthNum spoj

#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

struct node{
	node* l;
	node* r;
	int sz;
	node(){
		this->l = this->r = NULL;
		this->sz = 0;
	}
};

node* root[maxn];
int n, arr[maxn];
map<int, int> compress, decompress;
map<int, int> :: iterator it;

void init(int s, int e, node* &cur)
{
	if(s==e)
		return;
	int mid = (s+e)>>1;
	cur->l = new node();
	cur->r = new node();
	init(s, mid, cur->l);
	init(mid+1, e, cur->r);
}

void update(node* &cur, node* &prev, int s, int e, int val)
{
	if(s==e){
		cur->sz = (prev->sz) + 1;
		return;
	}
	int mid = (s+e)>>1;
	if(val <= mid){
		cur->r = prev->r;
		cur->l = new node();
		update(cur->l, prev->l, s, mid, val);
	}
	else{
		cur->l = prev->l;
		cur->r = new node();
		update(cur->r, prev->r, mid+1, e, val);
	}
	cur->sz = (cur->l->sz) + (cur->r->sz);
}

int query(node* p1, node* p2, int s, int e, int k)
{
	if(s==e)
		return s;
	int mid = (s+e)>>1;
	int lcnt = (p2->l->sz) - (p1->l->sz);
	if(lcnt >= k)
		return query(p1->l, p2->l, s, mid, k);
	else
		return query(p1->r, p2->r, mid+1, e, k-lcnt);
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, l, r, k, q;
	scanf("%d%d", &n, &q);
	for(i=1; i<=n; i++){
		scanf("%d", &arr[i]);
		compress[arr[i]];
	}
	j = 0;
	for(it=compress.begin(); it!=compress.end(); ++it){
		it->s = j;
		decompress[j] = it->f;
		j++;
	}
	root[0] = new node();
	init(0, n-1, root[0]);
	for(i=1; i<=n; i++){
		root[i] = new node();
		update(root[i], root[i-1], 0, n-1, compress[arr[i]]);
	}
	while(q--){
		scanf("%d%d%d", &l, &r, &k);
		int ans = decompress[query(root[l-1], root[r], 0, n-1, k)];
		printf("%d\n", ans);
	}
	return 0;
}

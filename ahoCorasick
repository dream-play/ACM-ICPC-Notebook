#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxs = 205;
const int maxc = 26;

int state_cnt = 0;
int n, arr[maxs], fail[maxs], score[maxs], to[maxc][maxs], len[maxs];
char str[maxs][maxs];

void insert(int ind)
{
	int i, j, nxt, cur_state = 0;
	for(i=1; i<=len[ind]; i++){
		nxt = str[ind][i]-'a';
		if(!to[nxt][cur_state])
			to[nxt][cur_state] = ++state_cnt;
		cur_state = to[nxt][cur_state];
	}
	score[cur_state] += arr[ind];
}

void ahoc()
{
	memset(fail, -1, sizeof(fail));
	queue<int> q;
	fail[0] = 0;
	q.push(0);
	while(!q.empty()){
		int cur_state = q.front();
		q.pop();
		score[cur_state] += score[fail[cur_state]];
		for(int i=0; i<maxc; i++){
			int nxt_state = to[i][cur_state];
			if(nxt_state){
				int fail_state = fail[cur_state];
				while(fail_state && !to[i][fail_state])
					fail_state = fail[fail_state];
				if(nxt_state == to[i][fail_state])
					fail[nxt_state] = 0;
				else
					fail[nxt_state] = to[i][fail_state];
				q.push(nxt_state);
			}
		}
	}
}

matrix matmul(matrix a, matrix b)
{
  matrix ret(state_cnt+1);
  int i, j, k;
  for(i=0; i<=state_cnt; i++){
    ret[i].resize(state_cnt+1);
    for(j=0; j<=state_cnt; j++){
      ret[i][j] = -1;
      for(k=0; k<=state_cnt; k++)
        if(a[i][k]!=-1 && b[k][j]!=-1)
          ret[i][j] = max(ret[i][j], a[i][k]+b[k][j]);
    }
  }
  return ret;
}

matrix matpow(matrix T, ll b)
{
  matrix x(state_cnt+1);
  matrix y(state_cnt+1);
  int i, j, k;
  for(i=0; i<=state_cnt; i++){
    y[i].resize(state_cnt+1);
    x[i].resize(state_cnt+1);
    for(j=0; j<=state_cnt; j++){
      y[i][j] = T[i][j];
      x[i][j] = -1;
    }
    x[i][i] = 0;
  }
  while(b){
    if(b&1)
      x = matmul(x, y);
    y = matmul(y, y);
    b /= 2;
  }
  return x;
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j;
	ll l;
  	scanf("%d%lld", &n, &l);
  	for(i=1; i<=n; i++)
    	scanf("%d", &arr[i]);
  	for(i=1; i<=n; i++){
    	scanf("%s", str[i]+1);
    	len[i] = strlen(str[i]+1);
    	insert(i);
  	}
	ahoc();
	matrix T(state_cnt+1);
	for(i=0; i<=state_cnt; i++){
		T[i].resize(state_cnt+1);
		for(j=0; j<=state_cnt; j++)
			T[i][j] = -1;
	}
	for(i=0; i<=state_cnt; i++){
		// cout << i << " " << fail[i] << "\n";
		for(j=0; j<maxc; j++){
			int cur_state = i;
			while(cur_state && !to[j][cur_state])
				cur_state = fail[cur_state];
			T[to[j][cur_state]][i] = max(T[to[j][cur_state]][i], score[to[j][cur_state]]*1LL);
		}
	}
	// for(i=0; i<=state_cnt; i++){
	// 	for(j=0; j<=state_cnt; j++)
	// 		cout << T[i][j] << " ";
	// 	cout << "\n";
	// }
	T = matpow(T, l);
	ll ans = 0;
	for(i=0; i<=state_cnt; i++)
		ans = max(ans, T[i][0]);
	printf("%lld\n", ans);
	return 0;
}
